;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This work is licensed under the Creative Commons Attribution 4.0 International License. ;
; To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or    ;
; send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; By: Nerdyjoe                                                                            ;
; screen names include nerdyjoe and nerdyjoe314                                           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 

#Requires AutoHotkey v2.0
#SingleInstance Force

; use F3 while a ritual screen is open to log all items and prices on the screen

; user settings
SetWorkingDir "E:\Documents\POE\Ritual"
CostLoggingDebug := true ; if true, makes lots of cost images. false saves disk space.
TimingDebug := true ; if true, writes how long each part of the software takes. False leaves cleaner log files

; user settings that are not yet implemented
; Screen resolution. Is this available directly from AHK info?

ImgSubDir := "RitualImages\"
IconSubDir := "RitualIcons\"
LogSubDir := "RitualLogs\"
xStep := 52
yStep := 52
nXbox := 12
nYbox := 10
xTLCorner := 333
yTLCorner := 293
totalTLx := 450
totalTLy := 213
totalBRx := 529
totalBRy := 244
; the following are not used, are notes for eventually converting to other screen resolutions
characterWidth := 9 ; how wide is one digit of cost?
separatorWidth := 4 ; how wide is the thousands separator?
characterPadding := 2 ; how much varience is there in character placement?
gemWidth := 800 ; how wide could a support gem tooltip possibly be?
otherWidth := 600 ; how wide could a normal tooltip be?
uplookHeight := 120 ; how far above the cursor could the cost be?
leftOffsetDigit := 24 ; how far between the tribute symbol and the first digit?
characterHeight := 20 ; how tall is a digit of cost?
characterOffset := 4 ; how much above the matched tribute symbol could digit information be?


; make the folders to hold the logs

if not DirExist(ImgSubDir){
  DirCreate ImgSubDir
}
if not DirExist(IconSubDir){
  DirCreate IconSubDir
}
if not DirExist(LogSubDir){
  DirCreate LogSubDir
}


; this is entirely vanity. The icon image for the toolbar.
icon := "
( Join`s
00 00 01 00 01 00 10 10 10 00 01 00 04 00 FB 00 00 00 16 00 00 00 89 50
4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 10 00 00 00 10 08 06
00 00 00 1F F3 FF 61 00 00 00 C2 49 44 41 54 38 8D A5 53 B1 0D 84 30 0C
BC A0 DF 28 55 C4 04 74 91 D8 88 82 86 59 90 D2 31 01 4A 95 99 F2 0D F7
F2 C7 F8 83 F4 6E 70 8C EF 7C BE 00 F0 67 B8 5E C3 3C 8D 95 F9 7E 9C AA
7F E8 00 25 18 F2 6C 12 10 78 01 64 9D A9 22 F9 02 97 9C 6A C9 89 D3 2B
00 75 96 6B 39 09 A6 D4 92 D3 ED 00 1F E2 47 09 FD B8 F3 40 19 E5 43 84
0F D1 01 70 AD 91 2F 29 47 2A 91 E0 92 13 D6 65 AB 12 CC BE 81 C5 F6 D9
90 38 82 DA 6B 35 AF 91 41 3F 5A 62 E5 C1 3C 8D F5 6E BA B5 1A C3 54 E0
43 04 00 AC CB A6 14 C8 5C 99 72 35 D0 38 EC C7 E9 7E 7D CE 83 F5 82 0A
7A FF 82 2A 58 BB 5A 04 8F C3 22 7E 03 71 19 7A 1A C3 B7 51 02 00 00 00
00 49 45 4E 44 AE 42 60 82
)"

binString := Hex2Bin(icon)
hand := OpenFileForWrite(IconSubDir "RitualReader.ico")
WriteInFile(hand, binString)
CloseFile(hand)
TraySetIcon IconSubDir "RitualReader.ico"

; Data for the images used. 
; Data converted from png to hex with the aid of https://hexed.it/
; The Join`s below means the lines are joined by spaces. The spaces are used to separate the entries.

tribute1 := "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 2E 23 00 00 2E 23 01 78 A5 
3F 76 00 00 00 07 74 49 4D 45 07 E7 08 0F 08 19 11 50 25 02 5F 00 00 01 0B 49 
44 41 54 18 D3 75 CE C1 2B 43 01 00 C7 F1 EF 5E 8F B5 DA 78 5A 6C 52 0E 7B CD 
6A 29 49 32 11 87 B9 71 E3 28 89 14 D9 96 5A D1 1C 84 83 96 44 C6 CD 41 ED 64 
17 21 C5 C5 D5 5F A0 94 83 24 45 2D DB FC 05 3F 07 7A 94 E7 73 FB D5 AF 5F 3F 
76 F3 2B 72 93 DF C8 E8 BC 54 90 47 92 00 E6 67 26 A8 55 6A D4 7B EB 28 96 AE 
00 E8 EB E9 C4 29 6C AE 2F D1 EC F7 10 B1 A3 DC DD 3F 91 5D DD 06 C0 E4 5B 4B 
38 C4 50 7F 2F F1 AE 11 DE CA 79 1C E9 F4 B4 72 B9 45 49 D2 E3 C3 AD 24 E9 FA 
EC 48 99 85 49 49 FA FA 30 3E 9A A4 23 66 63 59 7E 5A DB C2 4C CD 2E FF 2C 48 
D2 58 72 D0 79 9F 1C 4E 28 97 4D 39 D9 04 68 0C 36 71 5A 3A E4 BD 5C 21 6A B7 
B3 B5 73 E0 0C 98 00 C1 50 10 AB 21 40 3C 16 61 2E B5 C6 6F 06 C0 7E E1 18 9F 
CF 4B B5 FA C1 1F 92 74 52 DC D3 7F 0C 80 8B CB 1B 06 12 DD B8 31 00 9E 5F 5E 
B1 AC 80 6B E1 13 9F 7F A0 82 2F A5 45 85 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribute2 := "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0D 08 06 
00 00 00 65 C9 74 B5 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 10 24 39 A5 F1 77 B6 00 00 01 11 49 
44 41 54 18 D3 6D CA CF 2B 83 01 1C 80 F1 C7 BB 89 8B 9A AD BD 9B 1F 6D 66 F9 
71 7A D7 DA 2B DA CC 4A 96 65 B9 8C DA D1 71 6A 1C D6 7B 92 62 65 BB 88 B2 A4 
C4 CD C1 9F 80 8B 9A 72 95 A2 15 C5 4D A9 DD 6C ED 25 07 5F 07 29 C3 E7 FA 3C 
C8 2F 21 6D 48 44 44 8E 0E 8A 42 6E 79 41 44 44 A6 63 23 12 9F D0 9B 46 6B A3 
61 B2 BE 92 21 12 0E A0 AA 4E BE 0D FA 3D B4 88 88 94 76 F2 04 86 7D B4 2A 1F 
5C DF 3E B2 64 14 00 B0 D4 6A 4F F9 EE 2E 17 73 E9 2C 6D ED 16 5E EB 2F 94 CF 
4F 08 8D C6 50 CC BA 49 F5 B9 0A 80 AB 47 23 39 BF C8 C5 E5 15 00 CA FE E1 31 
95 9B 7B B6 0A 06 00 E9 D4 2C FD DE BE AF 98 9A 99 24 3C 1E C4 7C 7B 27 31 15 
65 C0 EF 63 63 B3 04 80 B5 C3 61 C3 E7 ED C5 ED B4 B3 56 D8 E5 27 A5 D3 6E 23 
99 CA A0 EB 1A 7B DB AB CD 51 55 1D 00 9C 9E 95 C9 1A C5 E6 E8 71 AB 00 54 EE 
1E F8 23 11 8F 4A 64 2C 28 FF F9 04 EE B0 84 6A 9F A9 EE 48 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
tribute3 := "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 06 
00 00 00 AE 95 A7 10 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 10 2F 0C 10 B6 6A 5E 00 00 00 F4 49 
44 41 54 18 D3 6D CE B1 4A 42 71 00 85 F1 CF 7F 46 12 06 99 60 43 A0 41 E8 D6 
D6 03 04 77 10 C4 C0 8A 1C BA 36 D4 22 44 18 A1 44 90 83 5A 70 C9 06 75 A8 AD 
4D 5A 9A 0A 82 82 36 B5 B7 68 68 68 2E DA AE 43 A7 21 AE 75 A1 DF 03 7C E7 D0 
3A 3B 92 67 31 95 90 24 ED D8 2B 92 24 24 A9 7A 58 94 24 15 36 D2 AA EC 15 24 
49 4E AD A4 20 C0 CB EB 1B 9D 66 99 8C B5 C4 57 30 0C C0 FD 43 0F BC E4 73 FF 
4E 7F AD 66 2D 99 7A FD 00 80 89 50 88 C1 E3 15 9E 68 34 42 20 97 5E 56 62 3E 
CE 74 24 4C CD B9 C0 67 3D 63 F9 72 76 3E A7 F3 93 63 49 92 99 9C FA 39 70 7B 
73 09 C0 6C 6C 86 4A F5 14 00 C3 B8 E1 BA DB 26 B9 10 A7 FF D4 25 95 9C 1B 55 
8D EB 0E 19 33 01 5C 77 C8 FB C7 27 C5 52 E3 77 D3 69 94 47 7B FB BB B6 6F 9F 
ED AD 35 6D E6 B3 FA CF 37 1D 2C AD 8D 5E 54 FA D9 00 00 00 00 49 45 4E 44 AE 
42 60 82 00 
)"
tribute4 := "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0D 08 06 
00 00 00 65 C9 74 B5 00 00 00 09 70 48 59 73 00 00 2E 23 00 00 2E 23 01 78 A5 
3F 76 00 00 00 07 74 49 4D 45 07 E7 08 0F 08 1B 27 AD A9 F5 44 00 00 01 18 49 
44 41 54 18 D3 5D 90 3F 48 02 01 1C 85 BF CB 0B EF CC 40 13 F4 4C 09 B5 4B 43 
70 12 69 6B 48 02 8D 22 A3 42 05 1B 6C 88 E0 16 DB 1C 5D 5A FA 03 41 53 D4 56 
B3 7B 34 14 14 D5 D2 D0 D2 1C 14 34 06 65 71 B5 FC 9A BA 8E BE ED F1 DE F0 F1 
10 17 23 91 21 C9 24 E3 4E 56 01 36 3B 2D 2E 2F AE 19 33 13 C4 E2 06 BF 28 8D 
FA 9C 28 80 99 8C 12 18 D4 E9 F7 FA 88 0E C7 A8 54 2D 54 D5 AB A1 EB 1A F9 42 
01 5D B1 79 7D FF A6 52 B5 98 C8 E7 50 44 44 70 F1 70 7F CE CB F3 23 A7 67 57 
60 AD 37 64 AD 59 13 11 91 EE C9 8E 23 53 5B 9A 15 16 67 8A 22 22 D2 6E AD 8A 
88 48 A9 38 E9 0C 94 FA 42 59 7C 03 1A 47 C7 5D E6 CB 53 18 46 14 BF DF CF EE 
FE 01 9E 6C 2E DD C9 8C 8F 62 BF 3D 11 09 87 B0 BF 3E D9 DA 3B 04 40 F5 A8 2A 
E9 4C 0A D3 4C 10 0C 06 E8 7D F4 1C B9 3E 4D F3 12 0E 87 48 65 A7 B9 B9 BD 63 
A3 BD FD A7 EE BE AF B9 52 71 47 71 CA DA 72 49 FE F3 03 F3 37 A8 33 82 3A CF 
A3 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"

; defer icons, afford are yellow, unafford are grey
deferafford1:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 10 2F 1D C2 BA 2D C9 00 00 01 01 49 
44 41 54 08 D7 01 F6 00 09 FF 01 E8 E0 7B FF BD 90 C2 00 45 76 67 00 00 01 00 
00 F5 F0 EF 00 0A 06 18 00 F9 EA F1 00 07 0C FE 00 A7 B2 B3 00 28 13 07 00 02 
0F 0D 11 00 E1 0A 0A 00 07 EC FA 00 C8 CA F1 00 55 56 8C 00 72 6F 82 00 18 2D 
1D 00 B7 BE EA 00 FC 03 17 00 18 15 1B 00 02 F5 F1 F7 00 15 0F 04 00 F8 F6 0C 
00 41 28 18 00 13 0B 08 00 28 2E 3C 00 F0 F3 10 00 30 3B 1B 00 21 1F 1B 00 0F 
11 0F 00 01 D4 C2 90 FF 23 29 29 00 86 90 BF 00 19 16 0F 00 35 36 31 00 14 17 
09 00 84 7F 8B 00 1C 20 14 00 63 4D 33 00 01 FE F9 00 04 19 1D F5 00 94 9A 96 
00 B2 A6 C1 00 02 04 06 00 3A 95 88 00 DE ED F6 00 F1 F4 03 00 F4 D1 E7 00 98 
EC A8 00 73 70 4A 00 04 06 0A 09 00 F5 ED F2 00 A6 A0 7A 00 A9 BA E6 00 C4 D1 
D1 00 FC 00 03 00 92 8E 5D 00 AA A8 DB 00 E8 E0 B2 00 04 05 04 00 53 87 52 13 
F7 07 30 59 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
deferafford2:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 10 2F 38 89 BE F9 8E 00 00 01 01 49 
44 41 54 08 D7 01 F6 00 09 FF 00 EE E4 7F FF 70 54 2E FF FA F5 B0 FF F1 F1 AE 
FF 41 3A 29 FF 97 7C 45 FF FC FB CF FF C7 9B 78 FF 8E 85 51 FF BD 9C 5A FF 02 
04 04 0C 00 0D 1D 13 00 F4 CC E6 00 E2 CA E8 00 E2 DD E3 00 A0 A6 D2 00 FF FB 
FA 00 EC 16 1A 00 F8 FB 0E 00 1F 1D 20 00 01 EC D5 7A FF FE FF F9 00 F3 08 68 
00 01 01 F4 00 94 7D 6D 00 6C 82 84 00 CD C9 CC 00 32 37 22 00 1D 1D 18 00 E5 
C6 BE 00 04 EE F6 14 00 FB 03 16 00 59 51 3E 00 2C 2C 30 00 84 83 82 00 F8 F5 
F0 00 8B 87 95 00 FF 01 FC 00 82 6C 48 00 31 37 25 00 04 16 19 FB 00 94 96 A2 
00 1A 13 09 00 E6 E1 D1 00 CB C7 D2 00 F1 F9 FD 00 4F 54 61 00 0E 05 FD 00 C5 
D4 BE 00 38 42 21 00 02 02 05 05 00 F8 F1 F7 00 91 8F 75 00 6E 79 84 00 E6 EC 
D3 00 F5 F6 DA 00 72 6F 42 00 EE F5 F6 00 FA F7 F9 00 01 02 02 00 C8 8A 6E 9A 
B3 22 53 8A 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
deferafford3:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 10 30 11 06 56 6F 7C 00 00 01 01 49 
44 41 54 08 D7 01 F6 00 09 FF 00 AD 80 47 FF D7 D1 92 FF FC FC BD FF A7 A6 75 
FF 24 18 10 FF D3 C5 95 FF FE FE D9 FF 97 48 15 FF DE D2 82 FF 91 61 2D FF 02 
11 30 20 00 F1 BB A8 00 FC F8 33 00 E1 C7 C1 00 F1 EF F1 00 DE E5 F2 00 FF FB 
FE 00 E2 2F 48 00 F7 FA 19 00 32 37 27 00 00 CB B4 62 FF FC F6 DF FF 67 66 5F 
FF C1 B9 A7 FF 2B 1E 12 FF E6 E4 C5 FF 53 4D 3E FF FC FC C8 FF FE FE CD FF C3 
95 50 FF 02 26 39 68 00 77 78 74 00 C3 BB BE 00 FF FD F8 00 87 8D 9E 00 C9 C8 
C4 00 D1 CA CD 00 61 46 54 00 DE CE CA 00 12 25 22 00 00 CF C0 71 FF 2D 1F 12 
FF 62 4D 29 FF 5F 4B 2E FF FE F6 FE FF 3C 35 1B FF E1 DA E1 FF 53 38 17 FF C3 
AD 65 FF E2 D1 81 FF 02 F2 E7 EC 00 82 77 3D 00 91 A6 BA 00 01 0D 23 00 00 00 
B8 00 75 76 67 00 0C 0A F6 00 D1 DC EE 00 F5 F0 F3 00 04 06 05 00 12 B9 85 6A 
33 F2 38 2C 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
deferafford4:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 10 30 27 C9 EC FA E5 00 00 01 01 49 
44 41 54 08 D7 01 F6 00 09 FF 01 A4 6E 3B FF 41 6E 60 00 CF C8 DA 00 39 48 33 
00 F2 D1 BC 00 09 20 4E 00 F8 CC CD 00 EB 17 0C 00 12 0F EE 00 B0 92 B8 00 00 
D0 C0 71 FF CC A5 63 FF F1 F1 DF FF 66 64 46 FF 2E 27 1B FF B8 AF 72 FF FC FB 
E9 FF 5B 37 1D FF DC D7 A1 FF B1 7F 3C FF 02 DE D8 E5 00 0A 0A 1E 00 F1 EC F6 
00 4D 35 25 00 02 00 03 00 09 0D 35 00 E4 DF BF 00 5F 81 73 00 FF F8 FC 00 17 
24 26 00 02 44 53 7D 00 E1 01 12 00 6C 6D 6D 00 1B 31 50 00 18 17 15 00 0C 0F 
09 00 60 5E 80 00 EF E3 E1 00 19 1D 1D 00 01 00 01 00 03 60 5C 17 80 69 67 8C 
00 FE F6 EE 00 11 02 E7 00 8C 95 B7 00 9D 99 6D 00 21 25 4B 00 A3 9B 9A 00 28 
1C F8 00 1D 2B 20 00 02 ED E1 E5 00 83 74 41 00 98 A4 AA 00 AB B3 CC 00 FF FF 
CF 00 1E 22 20 00 75 71 6F 00 02 00 02 00 FF FF FF 00 05 06 05 00 2F 8C 5F 56 
61 BC C2 7A 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"

deferunafford1:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 0E 39 2B 0F 5A C4 34 00 00 00 DE 49 
44 41 54 08 D7 05 C1 BD 6A C2 50 00 80 D1 AF 37 DE 26 31 9A 84 38 54 08 0D 8E 
5D AC 9B FA 0C 2D 68 47 0B BE 87 F4 B9 A4 B8 15 A4 44 A4 86 A2 1D FA 02 76 F0 
66 0D 98 BF 0B E9 39 37 AB D5 5B 93 24 DF 4C A7 63 00 8A A2 40 4A 49 9E E7 48 
29 39 9D 7E F0 3C 97 96 65 59 68 AD A9 AA 0A A5 14 9B CD 07 BD 9E C7 72 F9 CA 
E1 90 20 84 A0 DB ED 22 8A A2 A0 DD B6 D1 5A 13 86 21 96 75 4B BF 7F 47 59 96 
44 D1 3D 41 10 60 DB 36 AD 2C CB 98 4C C6 6C B7 9F 74 3A 0E F3 F9 13 8E E3 B0 
5E BF E3 FB 3E A3 D1 10 00 E1 BA 2E 71 BC E3 78 FC 25 DE 25 D4 75 4D 9A A6 54 
55 8D 52 29 FB FD 17 A6 69 22 A4 94 5C AF 39 8B C5 0B 8F C3 07 CE E7 3F 2E 17 
C5 6C F6 CC 60 10 D1 34 0D 86 61 F0 0F CB E9 53 F6 8B 7E 16 D2 00 00 00 00 49 
45 4E 44 AE 42 60 82 
)"
deferunafford2:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 0E 39 0D DD 57 41 C9 00 00 00 E7 49 
44 41 54 08 D7 05 C1 BD 4A C3 40 00 C0 F1 FF 25 97 21 78 83 0D 38 28 A6 62 1D 
92 A9 A3 14 D1 52 FA 21 14 97 82 F4 65 8A AF 52 05 07 DF A0 B8 75 F2 63 2C B4 
FA 00 15 8E 0C 29 01 E3 92 3B 92 C6 DF 4F CC 66 0F F5 62 F1 CA 74 7A 4F 59 96 
CC E7 CF 44 D1 05 C3 E1 80 F5 7A 4D 9A EE 08 82 00 C7 71 1C 94 52 A4 69 4A 92 
24 64 D9 1F AB D5 37 55 55 21 A5 64 BF AF 69 34 0E 91 45 51 D0 E9 5C E2 79 1E 
BE EF 13 45 67 8C 46 03 36 9B 2F 9A CD 90 38 8E D1 5A 23 AD B5 08 21 78 7C 7A 
E1 E4 F8 88 F1 F8 16 6B 2D CB E5 1B 75 5D D3 EB 5D 11 86 A7 48 A5 14 EF 1F 9F 
A8 03 9F 2C FB 65 BB FD C1 5A 4B BB 1D 23 A5 44 6B 4D AB 75 8E E3 BA 2E A6 30 
4C 26 77 F4 FB D7 E4 79 8E 31 86 6E F7 06 63 2C 65 59 21 84 E0 1F 94 DC 5B DB 
21 BD C7 E3 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
deferunafford3:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 0E 38 20 81 93 2C FD 00 00 00 F1 49 
44 41 54 08 D7 05 C1 4F 4B C2 70 00 80 E1 B7 39 2B F5 90 90 C1 68 39 77 48 42 
76 CB 53 D9 45 2F D1 20 3C 45 E0 C5 4B 67 BF 91 20 74 14 92 11 5E 77 32 08 F1 
60 37 29 88 05 FB 73 D8 61 12 3B 38 9B FB F5 3C 7B A6 79 2F EA F5 73 14 45 61 
B9 FC 60 3A B5 E9 F7 1F A8 D5 34 C6 E3 17 5A AD 2B E6 F3 05 52 A5 72 8C E7 F9 
08 21 70 5D 8F 24 49 59 AF D7 EC 76 19 85 C2 21 59 96 51 AD 9E 21 C9 B2 4C B3 
79 C9 64 62 D1 68 5C 50 2C E6 D1 75 9D D1 E8 19 D3 BC 43 55 55 84 10 48 9A A6 
61 59 AF 7C 7E FD 20 84 A0 DB BD C5 71 1C 5C 37 64 38 1C E1 FB 3E E5 F2 11 52 
10 04 AC 56 DF A8 A7 27 CC DE DE 31 0C 03 DB 9E 31 18 3C B1 DD FE 11 45 11 A5 
52 09 29 8E 63 DA ED 6B 7A BD 47 0E F6 F3 A4 69 4A A7 73 83 2C CB 84 E1 2F 9B 
4D 42 2E 97 E3 1F 92 16 5F 05 F1 31 C4 15 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
deferunafford4:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 0A 00 00 00 06 08 06 
00 00 00 FA F0 0F C6 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 0E 38 00 BA FD 0C 35 00 00 00 E4 49 
44 41 54 08 D7 05 C1 B1 4A C3 40 00 80 E1 3F B9 40 0E A1 E6 52 4C B1 9B 45 D3 
C1 62 2B EA 26 82 A7 E0 03 08 99 FA 32 BE 4D 51 52 44 B0 08 1D 9C 8A 43 2B B8 
74 71 AD 84 0C B9 25 0E 19 52 8F F8 7D CE CD ED 5D 73 71 7E C6 66 F3 43 BF 1F 
53 14 05 41 10 60 8C 41 08 81 94 92 D5 EA 13 37 3E 3A 24 CF 73 06 83 63 66 B3 
37 1E 9F 5E C8 B2 8C 38 8E 99 CF DF F1 3C 0F A5 14 6E 51 18 7C DF A7 AA 2A 7A 
BD 03 00 A4 94 18 63 D0 FA 0A 6B 2D 61 A8 70 87 C3 13 EA BA 26 4D 9F E9 76 F7 
D9 6D ED 20 A5 64 32 49 29 CB 5F 94 52 38 8E 83 18 8D 4E 1F A6 D3 57 B6 DB 3F 
84 70 48 92 7B 16 8B 0F 3A 9D 3D 96 CB 2F 94 6A 11 45 11 6E 59 96 68 7D C9 78 
9C B0 5E 7F 63 AD A5 DD 0E D1 FA 9A 06 68 1A 10 42 F0 0F 49 C7 4D 72 A5 33 5F 
53 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"


; numbers to track total tribute, 4 digit versions
tribtot0:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 17 18 A4 8D 0F 8A 00 00 00 EA 49 
44 41 54 18 D3 63 0C F4 B2 FE 1F E2 EF C4 F0 ED FB 0F 86 47 4F 5E 32 08 0B F1 
33 48 49 88 30 30 30 30 30 1C 39 71 91 81 71 C1 94 CA FF AC AC 2C 0C D1 E9 CD 
0C 30 30 A1 2D 97 41 4A 42 84 E1 F7 EF 3F 0C 4C 5C 5C 1C 0C F7 1F 3E 63 40 06 
9B B7 1F 61 60 60 60 60 60 65 65 61 60 62 60 60 60 B8 7E EB 21 8A 82 BD 87 CF 
33 7C FC F4 85 81 81 81 01 A2 60 E9 9A 3D 0C E8 E0 D1 93 97 08 05 F8 00 4E 05 
F7 1E 3C 43 28 88 0E 71 C1 50 20 2D 29 82 50 00 E3 20 03 76 76 36 84 02 29 49 
51 0C 05 72 32 E2 48 0A 24 44 18 9C 6D 0D E1 92 CE B6 86 0C FC 7C 3C 0C 6F DE 
7E 60 60 82 F9 37 22 18 E1 8E 88 60 17 86 DF BF FF 30 AC DD 74 80 81 91 81 81 
E1 FF EC 09 A5 0C FC 7C 3C 70 05 1F 3F 7D 61 D8 B6 EB 18 C3 FA 6D 47 19 00 A8 
40 42 9C 7C 94 11 AC 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtot1:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 17 2B 1B 5D 6E 9C 00 00 00 67 49 
44 41 54 18 D3 63 0C F4 B2 FE 6F 69 A6 CB 20 2D 29 CA C0 CA CA C2 00 03 CB D7 
EC 62 58 BF ED 28 03 4B 64 88 1B C3 EF DF 7F 18 9E 3E 7F CD F0 E6 ED 07 06 13 
43 4D 06 06 06 06 86 F5 DB 8E 32 30 30 30 30 B0 6C DC 76 98 61 E9 9A 3D 70 9D 
AB E6 35 32 20 03 26 64 49 6C 80 89 81 00 18 48 05 D1 21 2E 83 C6 91 00 F0 9B 
1C 3A BB 8B 2D 0F 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtot2:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 1E 18 75 4F B4 C3 00 00 01 0D 49 
44 41 54 18 D3 7D D0 31 48 02 61 18 C6 F1 FF C9 7D 50 D7 45 82 2E 2D D2 10 09 
41 0D B7 34 58 50 34 04 36 E9 DE 14 39 0A AE 81 83 D0 54 5B 41 60 C3 4D 09 21 
94 10 71 43 20 04 62 50 24 B7 94 4D 41 48 20 82 07 66 71 09 27 7C 2D 21 5C 17 
3D F0 6E BF 87 17 1E A5 6C 16 E4 7B FF 13 EB FA 96 FE 87 CB C6 FA 12 33 B1 69 
3C 6F 88 79 7A 85 0A 70 DF 68 52 B1 EA 00 54 6B 36 65 B3 80 10 2A 6B 2B 06 0A 
20 F9 95 E3 83 1C D1 48 98 AE D3 23 C4 3F 69 77 9C BF 41 34 12 06 E0 B1 F9 12 
04 D9 4C 1A 80 AE D3 A3 62 D5 83 C0 58 8C E3 79 43 CE 2F 6F 00 FC 60 6F 77 1B 
4D 1B E3 AE F1 44 B5 66 FB C1 CE D6 26 73 B3 31 1E EC 67 0E 4F 2E 46 A5 10 40 
2A 99 60 75 D9 E0 B5 D5 66 FF E8 CC FF 33 95 4C C8 52 31 2F B3 99 B4 FC D9 C4 
77 4A A9 98 97 EE D7 80 D6 5B 67 54 9A D4 35 F4 89 71 00 54 21 54 A6 84 CE C2 
BC 1E D8 C3 75 07 7C 03 22 39 5A 93 12 22 9C FA 00 00 00 00 49 45 4E 44 AE 42 
60 82 
)"
tribtot3:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 18 00 30 79 8B 13 00 00 01 04 49 
44 41 54 18 D3 6D CE 3D 4B C3 50 18 C5 F1 7F EC BD 50 32 15 12 A4 5A D0 4A 67 
07 27 51 D1 45 5D EA 20 22 14 67 A7 7E 02 27 C5 B8 38 F4 13 E8 60 27 B3 48 41 
04 E9 54 A1 F8 32 38 94 BA 38 88 88 14 C1 49 C1 96 72 9B F4 06 E2 20 56 49 73 
A6 67 F8 71 CE 63 9C 95 0F C2 76 A7 4B FD B6 89 5B A9 51 72 8A 64 27 C6 D0 3A 
A0 7C 7A C9 08 C0 F3 CB 1B 6E A5 06 C0 8E 73 84 52 1E 52 0A E6 67 A7 11 85 ED 
7D A2 51 3D 0F D3 4C E2 FB FD 9F 86 FF 59 5E 9C C1 B6 52 68 1D D0 78 78 42 44 
C1 D6 E6 0A 4A 79 5C 54 AF B9 BA 69 FE 81 8D FC 02 EB F9 25 A4 14 DC 37 1E 39 
AF DE 01 90 00 1C 80 4C DA 46 CA 04 E9 51 8B A9 C9 71 D6 56 E7 30 08 31 80 30 
3A E3 1E EF 21 A5 E0 E3 F3 6B F8 49 80 D7 D6 3B 00 B6 95 8A 07 7E 5F 0F EE 58 
F0 1B AD 83 78 90 CB 66 06 53 43 A0 E4 14 31 CD 24 ED 4E 97 DD C3 13 BE 01 35 
BB 51 33 76 F5 75 F2 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtot4:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 18 0F A0 C6 96 82 00 00 00 DA 49 
44 41 54 18 D3 7D D0 BF 8B 81 71 00 C7 F1 F7 F3 74 C3 73 DF 1C FF C1 2D 44 29 
CA 95 CD 95 81 C5 A2 64 53 16 65 94 E1 26 75 C3 C5 68 B3 1B 8C 16 DB D5 25 19 
74 C3 19 18 94 41 94 9E E4 E1 F2 C8 2D 0F 1B 03 BA C7 CF D7 FC FE 2C 1F 09 D8 
72 90 88 87 88 46 5E 01 98 CE 16 64 73 25 64 4C C2 41 3F 0B 7D 05 80 BE FC 03 
F8 0F 0A B9 14 C6 7A 83 36 D7 CD 9B 7D 90 88 87 70 3A 9E A9 37 DB 9C 93 01 82 
01 1F 63 55 A3 F6 F9 7D 19 64 D2 31 6C 56 0B 5F 8D 1F AE 91 5F BC 2E 06 43 95 
46 AB 7B 3D 10 42 A1 D9 EA 70 8B 3C 56 B5 9B 6B 00 A9 5A FE D8 72 C7 C3 F1 98 
23 F1 A8 20 84 82 61 6C 98 4C 7F 91 CC 57 03 BC BF 25 F1 B8 ED F4 FA 23 F2 C5 
CA E9 D5 66 4F 16 01 C0 0E 37 4F 40 6C 66 27 C0 BF 00 00 00 00 49 45 4E 44 AE 
42 60 82 
)"
tribtot5:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 18 1E CA 76 B6 70 00 00 00 DD 49 
44 41 54 18 D3 85 8F 21 6B 02 01 00 46 DF E9 A9 13 0F 45 3C 1C 8A 28 E2 06 86 
C1 18 98 B4 1B 6C FE 01 7F C0 DA 40 A3 60 37 68 B2 2C AF 59 2C 4B 33 1D 0B 32 
DC 0D 16 64 6D 2C 78 41 05 95 53 C1 3B 38 9B 1C BB C3 7B F9 F1 F1 3E A1 DD 6C 
58 C5 DB 1C 9B AD CE 7F DE 27 DF 88 00 9B AD CE 63 AB 87 1B BE D4 75 82 4B F8 
F0 40 04 88 45 25 06 DD 27 8E 86 C9 5C 5B 30 FD FA 61 AC A8 00 F8 0B F9 74 47 
DF 1D 30 0C 93 A4 1C 27 97 4D 71 7F 77 43 26 2D 33 99 CE 10 00 CB 3E F9 DC 6F 
11 8B 4A 00 8C 5E 15 FC 40 C7 2E EC 77 07 4A 0F 45 00 AE 42 41 67 E4 58 51 59 
AE D6 00 48 91 B0 F7 0B 57 21 10 10 01 38 1A A6 53 A8 D7 2A E7 C8 8F CF 99 53 
A8 55 CB 00 FC FE 69 BC 0C DF 38 01 A6 86 3D 55 67 8A 81 CA 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
tribtot6:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 18 2D 75 A6 D7 66 00 00 00 F7 49 
44 41 54 18 D3 7D 8E 31 4B 02 71 18 87 1F 8F 3B 48 BB 54 F0 C2 88 B0 25 04 97 
C0 40 1A E2 96 74 73 30 C2 2D 1A 44 B4 2D 68 6D AD 49 DD 04 3F 80 53 5F C2 21 
94 C0 45 91 53 83 F4 22 82 22 28 23 C5 ED 7F 60 C3 45 A2 69 CF FA 3E EF C3 CF 
51 CA 5F 4C 34 9F 17 A3 6B 72 55 28 33 8F A4 F9 BC 00 DC D5 0D 16 21 01 0C 47 
63 2A D5 E6 42 41 06 10 C2 E2 24 19 23 B2 17 62 FD A7 F8 3E F8 E2 B6 D6 B0 0B 
2E E7 0A A1 E0 36 9D FB 47 5A ED 1E 42 58 6C 6E 68 24 13 87 76 C1 7C 7A 99 19 
18 D5 C3 9C A5 8E 50 14 D9 2E CC 53 A9 36 79 7D FB 98 8E 5C 53 5D 7F A4 C1 E7 
70 2A A8 AB 4E 96 21 01 78 DC EA FF 82 A2 C8 64 4E E3 33 87 C0 96 DF 16 1E FA 
CF 00 1C EC EF 12 D5 C3 00 9C 67 8F F1 B8 55 8C AE 89 03 98 5C 5F A6 09 EE 04 
7E BF 85 B0 68 B5 7B E4 8A 37 7C 03 DB DC 43 E7 6F 62 AE D3 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
tribtot7:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 19 02 C7 6C DB 7E 00 00 00 D1 49 
44 41 54 18 D3 75 D0 3D 0B 41 71 14 C7 F1 2F B9 25 93 62 41 79 28 62 F0 10 8B 
22 83 DC 17 20 D9 EE 64 61 F3 0E BC 01 23 13 BB 32 C8 AE 98 64 B0 50 94 32 DD 
0C 18 50 A6 9B BA 8A 41 84 3F 67 3C 7D CE E9 FC 8E A1 D3 AA DD 24 C9 C4 BF 32 
00 37 A5 28 E3 72 D8 01 D8 EE 8F 00 A4 93 11 EC 36 EB 03 7C 4F E5 32 71 2A A5 
3C 9A 76 C1 F8 6B 6D 36 93 00 60 B5 56 7F 03 9F C7 89 AE 5F A9 37 BB 22 A8 96 
0B 48 92 89 ED FE 00 20 82 44 34 08 C0 60 34 15 81 52 94 B1 58 CC 1C 4F 67 46 
E3 B9 08 62 61 3F 00 93 E9 F2 D5 33 BE 47 F3 BA 1D 68 DA 85 4E 6F 28 82 54 32 
02 C0 6C B1 FE B8 E9 05 42 01 0F BA 7E A5 D1 EE 8B E0 19 4D DD EC 84 9F DC 01 
CA D2 38 7D B6 FD 8E 8C 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtot8:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 1E 39 39 26 A4 9D 00 00 01 2A 49 
44 41 54 18 D3 6D 8F 3F 48 02 01 18 47 DF 1D 77 60 87 FF 42 89 94 10 C7 22 88 
CA C0 C1 86 88 A6 0C 22 71 08 CA 86 40 69 49 0A C2 2D B0 55 B7 82 88 82 96 96 
88 48 22 32 68 68 D2 88 A0 A1 A5 59 24 34 42 21 CD 2E E1 84 6B 88 4E 85 DE FA 
3D 7E 7C 4F 38 3B DE D1 6B F5 06 D1 8D 34 9D EC A7 37 71 3A EC 88 00 36 AB 99 
68 24 D8 25 C8 B2 44 E9 AD 82 A8 AA 4D 00 A6 26 C7 89 C7 42 00 C4 63 21 94 1E 
13 57 37 39 84 85 D9 80 1E 9E 9F 46 96 25 00 2A D5 0F 64 59 22 7B 7B 4F 26 9B 
47 CC 64 F3 9C 5F DE A1 69 2D 00 9C 0E 3B 00 F5 4F 15 00 09 C0 37 3A 88 FA DD 
E4 AB DA C4 DD EF C4 66 35 B3 BA 3C 87 D5 A2 20 A4 92 6B 7A AF DD 62 54 24 D6 
17 99 18 1B 02 40 D3 5A 88 5E 8F 8B C7 A7 17 E3 FB D4 DE 29 B9 87 67 A3 44 04 
38 3A B9 EE 4A DC 3D BC A0 50 2C 03 FC 0A FF F1 5A 7A 6F 0B 7F FD 9D 0C B8 FB 
DA 82 DF 37 CC 52 78 C6 38 6E 6F AD E0 F5 B8 A8 D5 1B 08 D1 48 50 0F F8 47 50 
14 53 D7 42 A1 58 26 91 3C E0 07 BC F0 58 84 53 94 22 CB 00 00 00 00 49 45 4E 
44 AE 42 60 82 
)"
tribtot9:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0F 11 19 19 4D 09 12 92 00 00 00 F1 49 
44 41 54 18 D3 75 CE BD 4B 02 71 00 C6 F1 EF 99 F8 C6 91 95 E6 F1 43 30 E1 14 
53 92 8C DA 5C 9B DA 82 36 C1 FF 20 68 70 0A 04 5D 9C 05 77 FF 00 B7 96 C0 C1 
49 10 A4 17 85 06 71 88 22 A8 2E E8 02 23 8E 40 E1 1C C4 B7 2B BF F3 87 87 47 
CA E7 B2 66 32 A1 72 DB E9 71 D7 ED 73 98 8A 71 74 10 07 E0 EA BA 89 54 AB 16 
CD 37 ED 93 8B CB 0A D3 F2 B9 2C C9 84 8A 61 FC 62 03 D0 BF 06 2C D6 6A 3F 00 
E0 F1 B8 26 40 FB D0 97 40 A3 D9 61 38 1C 01 4C 80 DB ED C4 DA E0 FB 67 0E BC 
EB 32 AB B2 01 A8 E1 E0 4A 60 9F 9E 29 97 CE B9 B9 EF 01 10 14 FE D9 EA 9A 50 
B6 0A 42 F1 B3 E1 95 D9 8D EE 20 14 1F 8F 4F AF 04 B6 37 71 39 1D 48 80 F9 DF 
74 AD 5A 9C 7F B0 96 39 3B 5E 3E 69 6D 7F 2F 02 C0 F3 CB FB 5F 70 7A 92 26 1C 
12 00 D4 1B 6D C6 E9 B6 3B 1A B0 2D B2 91 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"

tribtots50:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 08 09 09 5B D8 76 00 00 00 F2 49 
44 41 54 18 D3 85 8C 31 48 02 01 18 46 9F 57 82 5C 72 27 79 C2 79 81 E0 14 D8 
28 D4 20 38 35 DD 22 8A 5B 7B B8 E8 D8 E4 70 10 DC 20 0D A2 4B 08 2E 4D D1 90 
9B 93 8B 60 A3 12 04 12 61 64 0E E6 70 82 8A 9B 82 0E 62 79 48 FA B6 9F EF FD 
CF 01 2C F2 66 1A 4D 55 D8 E4 A3 D3 23 6B 96 39 C8 9B 69 C3 E7 F5 F0 54 A9 71 
7B F7 40 30 A0 A2 F9 7D 78 8F 65 3C D2 11 82 A6 2A 7C 7D F7 A9 54 5F 00 C8 15 
1F E9 0F 2C 00 CE C3 21 04 80 E6 EB BB 2D 5F 6F B4 00 90 25 F7 4A 58 7F AF D9 
BC 05 FE C1 1A 8E 76 0B 7B 0B 36 E1 2A 79 B9 35 38 9D 87 7F C2 89 5F D9 12 64 
C9 CD 78 32 5D 09 A1 D3 A0 6D CC 5C 27 00 78 6B 7F 22 CC 66 73 44 D1 45 CE 48 
01 10 D7 23 5C 84 CF B0 86 23 0A A5 67 1C 71 3D B2 88 E9 51 44 D1 F5 5B E8 F6 
7E B8 31 EE 01 58 02 C7 67 3E 40 6C 38 EE 1B 00 00 00 00 49 45 4E 44 AE 42 60 
82 
)"
tribtots51:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 09 0B FE 4E 88 1B 00 00 00 6B 49 
44 41 54 18 D3 63 64 60 60 F8 EF 6C 6B C8 E0 68 6B C4 A0 28 2F C5 C0 CA CA C2 
F0 E6 ED 07 86 AC D2 7E 06 06 06 06 06 96 69 DD 85 0C 22 C2 02 0C 0C 0C 0C 0C 
DF BE FD 60 60 65 65 61 40 06 4C 5F BE 7E 67 38 72 E2 22 43 58 52 3D C3 D1 93 
97 18 D0 01 4B 59 C3 0C 38 E7 DB F7 9F 18 0A 98 18 08 80 91 AC 80 8B 93 03 CE 
06 00 5A 9F 19 3B 0F ED CE B1 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtots52:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0B 06 B2 C9 96 24 00 00 01 0D 49 
44 41 54 18 D3 65 CF BF 4B 02 71 18 C7 F1 F7 FD F8 36 C4 A5 82 0E 76 83 15 11 
48 12 04 37 38 F8 1F B8 E9 1F 21 E1 E0 76 A3 60 34 04 11 28 6E 1A 34 04 B7 44 
18 2E 37 35 99 81 41 11 12 FD A0 1F 43 AD 75 61 8B 04 27 7C 5B 4A F0 EE 03 CF 
F2 3C AF E1 F3 28 07 0D 5B 46 23 06 9F DE 08 80 44 3C 86 EF 4F B8 BC BE A3 D9 
EE A0 46 23 06 57 37 0F 94 ED 3A 65 BB CE ED FD 2B 42 E8 64 AD 0C 00 5A 7A 2D 
55 DB 6D 38 FC 27 1E 33 D8 58 5F 45 D3 54 E6 84 8E 02 48 02 39 3E DC 06 A0 EB 
9E A3 06 8F 85 7C 0E 00 DF 9F E0 9C 9C 85 81 B5 99 06 E0 F1 F9 0D 20 0C 56 96 
4C C6 E3 1F 76 F6 8F C2 60 AF B6 85 10 3A 5D B7 37 DD 4D 41 A5 54 64 39 B5 48 
7F 30 E4 D4 BD 98 05 85 7C 8E AC 95 A1 3F 18 D2 6C 77 42 AD A5 D3 AA CA 4A A9 
28 FF 5E 9E 19 C5 69 55 E5 87 37 C2 FB FA 0E F6 65 C1 98 47 17 42 C7 4C 26 30 
93 89 10 78 7A 79 E7 17 37 3A 52 95 65 60 FD D5 00 00 00 00 49 45 4E 44 AE 42 
60 82 
)"
tribtots53:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0A 15 2F 6C E6 BB 00 00 01 14 49 
44 41 54 18 D3 6D 8E 3D 48 02 61 00 86 1F EF BE 8F 44 8E BB FE 26 07 11 A9 90 
B6 AB 68 A8 04 41 68 90 08 AA B5 A9 A0 C1 A1 ED 96 20 08 0A 5A 02 5D 43 68 A8 
9C 45 A8 DB 82 C8 DC A4 5B 22 41 6C 71 89 20 A1 22 24 F8 0E 6C 08 C9 B2 67 7D 
1F DE F7 0D E4 73 4E C7 32 0D 5E 5A AF 00 8C 8E 0C A2 94 CF F5 ED 1D F9 B3 4B 
34 CB 34 A8 7A 35 32 4E 96 8C 93 A5 EA D5 90 52 90 5C 98 02 40 8F 8F 47 F6 0E 
73 05 BA 04 07 24 33 76 1C 5D D7 F0 95 42 DB 3F 3A A5 97 58 34 0C 40 BB FD 49 
D1 AD A0 F1 87 D9 E9 49 94 F2 29 B9 37 00 88 6E 90 4A D8 AC 2D 27 91 42 70 72 
7E C1 55 D9 03 F8 69 88 45 C3 48 29 08 85 82 6C AC 2F B1 BD B5 0A 40 00 E8 F4 
4E 1C EC 6C 32 31 16 01 A0 E4 96 FB 05 80 C2 F1 2E 52 0A EA 8D 66 FF 49 80 B7 
F7 0F 00 86 87 CC FF 05 29 BF BF 3F 3D B7 FA 85 95 F4 3C 96 69 00 70 FF F0 F8 
5B 48 25 6C D2 8B 73 00 D4 1B 4D 8A 6E 85 2F 08 BA 4B 4C 7A 63 5E 09 00 00 00 
00 49 45 4E 44 AE 42 60 82 
)"
tribtots54:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0A 06 AB D2 A7 65 00 00 00 B6 49 
44 41 54 18 D3 63 64 60 60 F8 CF 00 05 81 5E D6 0C 21 FE 4E 0C AC AC 2C 0C 1B 
B7 1D 66 58 BA 66 0F 03 13 03 12 F0 72 B3 62 40 07 70 05 B5 25 71 0C 0C 0C 0C 
0C 1F 3F 7D C1 54 E0 6C 6B C8 A0 AB A5 CC B0 6D D7 31 EC 26 04 FB 39 30 3C 78 
F4 9C 61 FD B6 A3 98 0A 52 63 BD 19 F8 F9 78 18 76 EE 3D C9 80 0D 30 59 9B EB 
31 DC B8 FD 90 61 EF E1 F3 D8 15 70 71 71 30 34 F7 2C 62 C0 05 98 1E 3C 7A CE 
80 0F 30 2E 98 52 F9 FF DB F7 1F 70 01 7E 3E 1E 06 56 56 16 B8 77 99 90 25 D1 
C1 D7 6F 3F 18 18 91 83 9A 81 81 81 61 5A 77 21 83 88 B0 00 F6 A0 C6 06 00 10 
B2 37 F0 6D 09 7B 45 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtots55:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0A 25 09 B5 D6 17 00 00 00 E9 49 
44 41 54 18 D3 63 AC 2D 89 FB AF AB A5 CC 80 0D 2C 5F B3 8B 81 45 52 5C 98 E1 
CD DB 0F 0C 47 4F 5E 46 91 FC F6 ED 3B C3 FA 6D 47 19 58 18 18 18 18 9E BF 7C 
CB B0 74 CD 1E AC A6 30 31 10 00 4C 5C 9C 1C 0C 92 E2 C2 0C 65 B9 11 0C D1 21 
2E 18 0A 18 27 B4 E5 FE 67 63 65 61 E0 E7 E3 61 60 65 65 61 F8 FD FB 0F C3 FD 
87 CF 18 6A DA E6 42 14 30 30 30 FC 87 A9 2E CB 8D 60 30 31 D4 64 60 60 60 60 
78 F0 E8 39 43 59 C3 0C 06 66 06 06 86 06 98 82 A3 A7 AE 30 68 A8 CA 31 88 8B 
0A 31 08 F0 F3 32 BC 7B F7 11 D3 91 C7 90 BC AB AD A9 88 A9 60 EF E1 F3 70 36 
07 3B 1B 7E 6F 3E 7D FE 06 53 41 5E 5A 10 03 03 03 03 C3 EF DF 7F 18 96 AE D9 
83 AA 20 D0 CB 9A C1 DC 58 9B 81 81 81 81 E1 C0 91 73 0C 0C 0C 0C 0C 00 61 9B 
40 1A 85 2D 12 1B 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtots56:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 09 25 22 98 85 D4 00 00 00 F1 49 
44 41 54 18 D3 6D 8F 3F 4B 02 61 00 C6 7F F7 72 AF D9 21 6A 7F 96 96 C3 41 5C 
1C 1B FA 1E 7D 85 20 5A 8A 5A A5 21 21 1C 74 11 84 B6 FA 00 2D 21 81 11 71 04 
A9 91 2E 12 7E 07 A9 B8 D3 4B 44 D2 57 B8 86 43 EB 3C 9F F9 C7 EF 79 1E ED 32 
77 E0 65 D2 26 BD 0F 9B D3 5C 85 E5 88 4C DA 04 E0 FE A1 C1 AA 08 80 EF E1 08 
AB DE 59 09 E8 00 9F 5F 7D 00 4E 0E F7 49 C4 63 00 BC B6 BA 58 F5 0E DA ED 4D 
DE B3 1D 17 29 75 94 9A 61 AC 47 31 8C 28 00 8D B7 77 DF D0 1F 0C 39 2F 5C 2F 
B4 C5 8B 23 52 E6 0E 7B BB 59 7F C3 64 AA 02 BD 8F 56 0B 00 29 75 1F 58 CE FF 
C1 02 60 2D 22 43 90 ED B8 7F C0 E6 46 3C 04 CC DF 08 80 ED AD 64 08 90 52 C7 
76 5C C4 5C 55 2E 1C 07 5E 28 35 E3 E9 B9 8D 06 78 57 A5 B3 80 65 3C FE A1 5A 
7B E1 AE D6 E4 17 7F D1 4C 49 75 37 52 A2 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
tribtots57:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0B 16 AF 7E 86 40 00 00 00 D8 49 
44 41 54 18 D3 7D CF BF 4B 02 01 18 C6 F1 AF 72 B7 85 62 38 5C 37 F8 B3 45 ED 
10 1D 12 84 1B C4 9A DA A4 2D 1C 6B EC 7F 10 57 27 C7 86 86 A0 25 44 37 A7 56 
11 DA C4 06 31 83 EB 40 5C 4E 70 12 F1 0E 6C 13 8F 57 7C C6 97 0F CF C3 1B F8 
78 6D EC 38 11 65 3A B3 39 8F 84 50 55 05 D7 F5 00 D8 BA 1E BA 16 05 20 00 88 
86 C7 FA 1D B7 95 6B 2C 7B 41 F0 58 6D 2E 93 02 60 F4 3D 93 A0 6A 16 D0 B5 28 
CE 72 C5 7B E7 53 82 8A 59 04 60 F2 F3 07 20 41 32 AE B3 5E 6F 68 BF 74 25 78 
7E AA A1 AA 0A BF D6 7C 7F F3 01 23 9B 06 A0 D9 7A 93 E0 E1 FE 86 70 E8 0C CB 
5E F8 26 F7 20 7F 75 09 C0 F0 6B 2C 41 D5 2C 90 88 5D E0 2C 57 F4 FA 03 09 CA 
25 C3 F7 DA 61 FE 01 3D 1F 38 4A 1C AE 70 72 00 00 00 00 49 45 4E 44 AE 42 60 
82 
)"
tribtots58:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0B 27 FE A0 86 7A 00 00 01 2B 49 
44 41 54 18 D3 6D 90 3D 48 42 71 14 47 CF F3 03 5E 7F F2 03 8B C2 10 0B 4C 29 
AC C4 A9 20 6D B1 A5 20 1A 5A DC 23 90 40 68 D1 A1 E9 09 4D AF A1 C0 51 70 91 
C0 24 88 A0 22 A8 28 70 2A 88 88 A2 22 6B A9 B5 A0 A2 C5 9E F0 1A AC A7 90 67 
BC BF 73 EF E5 5E A9 94 CF E8 AF 6F EF 2C A6 D6 68 A6 94 CF 70 7D FB 84 09 40 
B4 C9 B4 A2 5A FD FE 15 84 8C AA 24 8C 20 9D 8C A3 69 35 D4 6C 11 73 28 E8 53 
3A 5C 0E 9C 0E 1B E3 A3 C3 04 7C 1E 46 82 FD 6C EF 9E 72 5F 79 41 02 74 55 49 
D0 E7 75 1B 13 76 F6 CB 6C 6C 1D 01 60 06 94 C1 80 97 4E 97 B3 5E 30 9B 18 F0 
F7 E2 EE 76 71 76 71 87 65 65 79 1E 4F 4F 17 85 CD 03 EC 36 C1 EC F4 04 42 C8 
44 C6 42 00 48 A5 7C 46 3F 3C 39 27 57 D8 33 56 E4 D6 53 38 EC ED 00 F5 2B 9A 
43 80 85 A5 55 34 AD D6 10 5A F1 F1 F9 D5 10 62 D1 F0 3F E1 EF 79 16 80 F8 DC 
24 00 C7 E5 4B 62 D1 30 33 53 11 84 90 79 78 7C 46 4A 27 E3 7A 68 C8 8F D5 6A 
31 BA 35 AD C6 D5 4D 05 35 5B E4 07 9C 22 52 5E 77 1C 68 96 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
tribtots59:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 08 00 00 00 0D 08 06 
00 00 00 94 C2 2F 38 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 10 12 0C 10 09 5C B5 B2 00 00 01 09 49 
44 41 54 18 D3 75 8F 31 48 02 61 00 85 3F AF BB B0 9F A8 A5 E2 BA CC 23 12 A1 
28 DA 5C 84 20 A8 E5 1C 42 68 08 CA 51 68 91 86 20 1A 9B DA 82 68 6C 77 93 9C 
72 C9 51 C1 55 68 08 6A A8 10 83 43 2B 1A 7E 0F EE EA 1A E4 0E 29 FB A6 C7 E3 
7B C3 8B 64 AD B4 BF 6D AD E3 7A 1E AE EB 31 39 31 8E A6 A9 D4 1A 4D 2E AF AE 
19 39 39 DC 3F 95 3D 87 83 A3 73 6E 6E 1B F8 DF 5F AC 2E 2F 12 8F E9 8C 6A 2A 
8A 10 51 EE 1F 9E 09 28 57 EA 3C BD BC 02 B0 B6 92 40 01 E8 BE 7D 32 48 AB 6D 
03 30 37 3B DD 17 7E 13 0C 34 4D 1D 2E 14 4B D5 30 2B 00 4B 49 93 FF 50 00 16 
4C 83 BD 9D CD B0 CC E7 32 61 8E 5C 9C 15 7C 43 9F 0A 0B 29 1D 5A 6D 9B 64 22 
DE 17 00 3F 6B A5 11 62 0C 29 7B 94 2B 75 F2 B9 0C 5B 1B 29 A4 74 50 83 EF 83 
98 F3 3A 00 76 E7 7D F8 8B 98 31 03 40 F3 EE F1 AF 70 5C D8 45 88 28 9D EE 07 
C5 52 95 1F DD 70 51 64 CD E4 A5 AA 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"

; numbers for tribute cost detection in red and grey
afford0:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0B 08 06 
00 00 00 B3 90 97 A8 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 02 0D 46 59 6A 10 00 00 00 63 49 
44 41 54 18 D3 A5 D0 31 0E 80 20 14 03 D0 42 E4 88 2C 6E 2C DE 42 12 B9 85 0C 
32 C9 20 47 C4 A4 0E 18 F3 07 71 F1 8D BF E9 D0 AF 48 12 B7 92 02 00 C0 3A DF 
0E 24 B9 AF 33 A5 63 5B 48 92 4A 36 A5 92 02 74 8E 1E 3D DA 98 A1 1F E2 C3 8F 
D0 3A FF EC 93 6A 3D DF 9B 39 7A 8C 53 68 4F 90 C3 E5 43 2E AB D0 4A 6F 0B 98 
8B 75 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
afford1:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 03 00 00 00 0B 08 06 
00 00 00 BA 7B 37 D2 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 02 2C 0A 30 7A 4E 00 00 00 27 49 
44 41 54 08 D7 63 FC FF FF FF 7F 06 06 06 86 D5 F3 9B 18 98 56 CF 6F 62 80 01 
A6 D0 C4 3A 04 87 01 09 D0 90 03 00 96 3F 08 DE 23 EE 66 C4 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
afford2:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 05 00 00 00 0B 08 06 
00 00 00 B7 65 47 95 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 03 1A DC 91 DE 96 00 00 00 41 49 
44 41 54 08 D7 63 F8 8F 04 56 CD 6B FC FF FF FF FF FF 8C FF FF FF FF CF 80 04 
56 CF 6F 62 60 62 C0 02 88 17 64 40 B6 68 E9 CC 5A EC 16 A1 68 5F 36 AB 0E 2E 
88 5F 25 32 60 59 3D BF 09 43 10 00 5E 5E 36 BE 25 E2 5D FA 00 00 00 00 49 45 
4E 44 AE 42 60 82 
)"
afford3:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 04 00 00 00 0C 08 06 
00 00 00 45 A2 1C 13 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 04 02 80 BC D0 07 00 00 00 4A 49 
44 41 54 08 D7 63 F8 FF FF FF FF 55 F3 1A FF C3 00 03 8C 01 13 64 62 40 03 70 
81 DF BF FF 30 30 30 30 30 30 FE FF FF FF 3F 56 15 18 02 AB E7 37 61 AA 58 3D 
BF 09 8F 16 06 06 06 86 D0 C4 3A 4C 6B 19 96 CE AC FD 8F 0C 00 54 E4 3A E4 AE 
06 A0 6D 00 00 00 00 49 45 4E 44 AE 42 60 82 00 
)"
afford4:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0B 08 06 
00 00 00 B3 90 97 A8 00 00 00 09 70 48 59 73 00 00 2E 23 00 00 2E 23 01 78 A5 
3F 76 00 00 00 07 74 49 4D 45 07 E7 08 0F 07 31 29 2E 26 53 56 00 00 00 38 49 
44 41 54 18 D3 63 F8 8F 06 56 CD 6B 84 B3 19 FF FF FF FF 9F 01 07 60 62 C0 03 
08 4B 2E 9B 55 87 55 12 BF 9D AB E7 37 E1 34 96 85 81 81 81 01 A7 02 7C FE 24 
DF 2B 00 A8 0C 42 C1 5A 0F 55 51 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
afford5:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 05 00 00 00 0C 08 06 
00 00 00 AA 60 77 2D 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 00 18 19 B2 EC 79 00 00 00 50 49 
44 41 54 08 D7 95 CD BB 0D C0 20 0C 45 51 13 D9 23 66 80 0C 42 0A B6 A0 A2 A2 
62 44 90 6E 2A 24 9C 4F 91 DB F9 BC C2 A1 E6 88 99 CA 9A 9A A9 EC C7 E9 70 93 
97 BE B1 95 E4 30 00 CC A3 95 24 BD 0F 8F 73 F8 F9 E8 11 4B 35 47 00 E4 0E 00 
17 6E 9B 39 C0 C0 6B B4 8D 00 00 00 00 49 45 4E 44 AE 42 60 82 00 
)"
afford6:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 06 
00 00 00 AE 95 A7 10 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 00 32 C2 09 25 AF 00 00 00 5E 49 
44 41 54 18 D3 63 F8 0F 05 4B 67 D6 FE 47 07 8C FF FF FF FF CF 80 03 30 31 30 
30 30 AC 9E DF 84 5B 12 17 60 59 36 AB 0E B7 24 2B 2B 0B 43 68 22 AA 02 98 06 
AC C6 46 A5 35 31 B0 B2 B2 E0 B7 93 E9 F7 EF 3F B8 5D 1B 95 D6 C4 80 D7 9F D8 
40 68 62 1D 03 03 2C A8 56 CD 6B C4 08 3E 00 5C F5 48 74 22 B8 B7 C3 00 00 00 
00 49 45 4E 44 AE 42 60 82 00 
)"
afford7:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 06 00 00 00 0B 08 06 
00 00 00 5C 52 FC 96 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 10 1F 0D B8 F7 6C 3B 00 00 00 37 49 
44 41 54 18 D3 8D 8C 41 0E 00 10 00 C3 CA CF 79 08 77 1E 39 27 89 30 61 D7 76 
0D AD 24 61 16 24 1D A0 D7 EC 01 40 74 F6 35 65 1F 16 CC CC 5F 6A B5 DF 8F DD 
06 18 81 EF 1F C1 F4 8A 44 22 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
afford8:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 06 
00 00 00 AE 95 A7 10 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 01 19 77 AE ED AE 00 00 00 78 49 
44 41 54 18 D3 75 90 3B 0E C3 30 0C 43 5F 8D F8 88 59 BC 65 F1 2D 2A A0 BE 45 
3C 24 53 3D B4 47 74 00 76 72 91 8F F3 36 41 14 41 11 49 7A CF 4F ED 69 B3 03 
F0 7E 60 4F 88 89 92 0D C7 0D 21 A6 FB 25 C0 43 92 00 BE 6B A2 D6 8D 10 D3 75 
D9 04 00 E3 64 00 47 DB 71 32 6A DD FE A2 C3 65 A3 64 C3 FB 01 57 B2 75 93 02 
B8 F3 8F DD B4 3D 6B 5A 65 9F E5 A5 73 95 3F 65 1B 5C A9 17 AB 3D FF 00 00 00 
00 49 45 4E 44 AE 42 60 82 00 
)"
afford9:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 06 
00 00 00 AE 95 A7 10 00 00 00 09 70 48 59 73 00 00 0E C3 00 00 0E C3 01 C7 6F 
A8 64 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 01 2E CF 13 48 A1 00 00 00 4E 49 
44 41 54 18 D3 7D 90 C1 11 C0 20 08 04 57 7A B4 00 1B 71 26 16 12 FF B1 C8 F3 
15 27 63 84 7D C1 01 37 00 DA 78 EE 6B C5 EC C2 37 4F 92 C4 81 D1 1B 36 7A C3 
C3 08 88 8B B9 54 3C 6B 03 F0 1A 96 6D 2E F5 3F AA 03 EF 9D E1 42 44 EF 9B 83 
8A 78 64 9B 8C EA 05 00 00 00 00 49 45 4E 44 AE 42 60 82 00 
)"
unafford0:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0B 08 02 
00 00 00 3C F2 00 FF 00 00 00 09 70 48 59 73 00 00 2E 23 00 00 2E 23 01 78 A5 
3F 76 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 2E 25 4A DD A9 44 00 00 00 47 49 
44 41 54 08 D7 A5 CE B1 0D 80 30 10 43 D1 EF 14 6C 93 8A FD 47 A0 21 DB D0 7C 
0A A4 13 11 E9 78 9D 4F 96 7C 51 01 60 24 40 7F A2 B3 13 D4 54 B7 8C A4 1D 09 
1F 6D 63 A1 F1 FB DA 75 CC 83 D7 B2 BB 2B EF E7 CB 0D 33 6E 36 60 CF 3B F0 C5 
00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
unafford1:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 04 00 00 00 0B 08 02 
00 00 00 D7 C5 BB FC 00 00 00 37 49 44 41 54 08 1D 1D C1 01 0D 00 30 08 C0 30 
26 E8 FE 85 20 A8 4F 68 C3 9C AD B0 F5 D8 0A 73 B6 C2 9C AD 30 67 2B CC D9 0A 
73 B6 C2 9C AD 30 67 2B CC D9 0A 73 B6 3E A5 9A 2D 12 17 B8 33 4F 00 00 00 00 
49 45 4E 44 AE 42 60 82 
)"
unafford2:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 06 00 00 00 0B 08 02 
00 00 00 D3 30 6B C1 00 00 00 47 49 44 41 54 08 1D 55 C1 B1 09 C0 30 10 04 B0 
BB 81 BE CA FE 23 A4 89 07 52 C0 E0 C2 52 91 6D B5 43 92 22 C7 6A 87 22 C7 6A 
87 22 C7 6A 87 22 C7 6A 87 22 DB DB 3E 24 29 72 2B 92 BC ED 43 B6 22 B7 22 B7 
7E B9 0C 3F 57 8E 35 EB 6F 79 86 17 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
unafford3:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 06 00 00 00 0C 08 02 
00 00 00 CE 35 5B 79 00 00 00 4C 49 44 41 54 08 1D 55 C1 B1 0D C0 30 0C C0 30 
E9 A0 4C F9 FF 84 4E 3E 48 05 0A 78 28 69 C5 67 F4 14 60 C5 1A 3D 65 C5 1A 3D 
65 C5 7A F4 96 15 7F 56 FC 59 B1 46 4F 59 B1 46 01 2B D6 28 60 C5 1A 3D 65 C5 
7A F4 96 15 F0 E8 2D 3E 2F 22 9D 3D 93 57 7E 85 94 00 00 00 00 49 45 4E 44 AE 
42 60 82 00 
)"
unafford4:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 02 
00 00 00 21 F7 30 47 00 00 00 48 49 44 41 54 18 19 6D C1 B1 0D 02 41 10 C0 40 
BB A0 8D E8 BF 04 92 BF 82 4C 74 12 68 99 B1 62 B1 E2 3A 3A 05 58 B1 58 B1 58 
B1 58 BD F5 55 7C B1 62 F1 81 29 7E F9 F0 87 15 D7 D1 29 C0 8A EB E8 14 60 C5 
75 74 0A F8 00 61 98 30 BE F1 67 83 34 00 00 00 00 49 45 4E 44 AE 42 60 82 00 
)"
unafford5:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 05 00 00 00 0C 08 02 
00 00 00 25 02 E0 7A 00 00 00 4D 49 44 41 54 08 1D 45 C1 B1 0D C3 30 10 C0 40 
B2 C9 36 AA BC FF 06 71 23 6D 93 86 41 0C 3C 72 E7 1B 5E FC B9 61 15 C3 0D AB 
18 6E 58 C5 70 F3 B3 8A 87 15 8F A3 1F B0 62 1C B5 62 1C B5 62 1C B5 62 1C B5 
E2 71 EB 55 56 C0 AD 57 01 5F 58 1E 2C E1 28 B2 91 4D 00 00 00 00 49 45 4E 44 
AE 42 60 82 
)"
unafford6:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 02 
00 00 00 21 F7 30 47 00 00 00 59 49 44 41 54 18 19 65 C1 B1 6D 03 41 10 C0 40 
32 71 37 1B A9 FF 0E A4 E4 B7 20 0A 0A 0E 38 C0 33 56 C0 47 5F C5 61 C5 3F 56 
AB 53 5C AC 56 A7 B8 F8 E6 E7 55 5C 7C 60 8A E3 A3 80 0F 4C 71 59 F5 81 29 2E 
AB BE E1 0F A6 38 56 AD 56 A7 38 56 AD 56 A7 B8 58 01 AB 53 1C 5F 0C 9C 3A 0C 
86 0D F2 8C 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
unafford7:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 02 
00 00 00 21 F7 30 47 00 00 00 09 70 48 59 73 00 00 2E 23 00 00 2E 23 01 78 A5 
3F 76 00 00 00 07 74 49 4D 45 07 E7 08 0E 11 2F 25 53 C6 98 05 00 00 00 3D 49 
44 41 54 18 D3 63 3C C3 C0 C0 C6 80 0E 18 FF FF FF 8F 26 74 99 91 11 8B 28 03 
03 03 13 A6 42 EC 26 A0 AB 3D CB C8 88 45 94 0D 8F 1B 50 D4 5E 86 69 27 A4 16 
59 21 42 F4 17 AA 5A 00 79 3A 14 F9 18 7A C8 65 00 00 00 00 49 45 4E 44 AE 42 
60 82 
)"
unafford8:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 02 
00 00 00 21 F7 30 47 00 00 00 61 49 44 41 54 18 19 55 C1 B1 89 43 31 14 00 C1 
DD C4 DD 28 52 FF 1D 58 C9 BD 6E 2E 59 C3 07 83 3C 63 75 74 17 8F A3 BB AC 46 
57 F1 75 D4 6A 74 15 17 AB D1 55 5C AC 80 D1 7F D8 C5 C3 8A C7 28 B0 0A B0 E2 
EB E8 0B 56 59 71 39 FA 02 DF B0 8B CB A8 7F B0 8A CB A8 15 BF 8E 5A 01 A3 AB 
8E EE 02 3E 4B 66 47 06 AF C0 C9 77 00 00 00 00 49 45 4E 44 AE 42 60 82 
)"
unafford9:= "
( Join`s
89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52 00 00 00 07 00 00 00 0C 08 02 
00 00 00 21 F7 30 47 00 00 00 53 49 44 41 54 18 19 55 C1 81 09 C0 30 0C C0 30 
FB A0 FC FF 47 73 90 07 83 41 27 59 F1 59 9D 02 AC 56 A7 78 AD 4E 59 F1 B7 EA 
81 29 2E AB 1E 98 E2 B2 EA 81 29 2E AB 56 AB 53 7C 56 AD 80 D5 29 5E AB 56 FC 
AD 5A 71 59 9D B2 E2 B2 3A 65 C5 67 75 0A 78 00 97 8B 41 BC 25 8A 41 4D 00 00 
00 00 49 45 4E 44 AE 42 60 82 
)"


; load the images

importingImages := ["tribute1","tribute2","tribute3","tribute4",'deferafford1','deferafford2','deferafford3','deferafford4',
'deferunafford1','deferunafford2','deferunafford3','deferunafford4',
'afford0','afford1','afford2','afford3','afford4','afford5','afford6','afford7','afford8','afford9',
'unafford0','unafford1','unafford2','unafford3','unafford4','unafford5','unafford6','unafford7','unafford8','unafford9',
'tribtot0','tribtot1','tribtot2','tribtot3','tribtot4','tribtot5','tribtot6','tribtot7','tribtot8','tribtot9',
'tribtots50','tribtots51','tribtots52','tribtots53','tribtots54','tribtots55','tribtots56','tribtots57','tribtots58','tribtots59',]


for aName in importingImages{
  binString := Hex2Bin(%aName%)
  hand := OpenFileForWrite(IconSubDir aName ".png")
  WriteInFile(hand, binString)
  CloseFile(hand)
}

; I wanted to do this another way, but it is what it is
; list of offsets that this item takes up
sizeMap := Map(
"Item Class: Delve Stackable Socketable Currency",[0], ;"11",
"Item Class: Blueprints",[0], ;"11",
"Item Class: Contracts",[0], ;"11",
"Item Class: Rings",[0], ;"11",
"Item Class: Maps",[0], ;"11",
"Item Class: Divination Cards",[0], ;"11",
"Item Class: Map Fragments",[0], ;"11",
"Item Class: Amulets",[0], ;"11",
"Item Class: Stackable Currency",[0], ;"11",
"Item Class: Expedition Logbooks",[0], ;"11",
"Item Class: Jewels",[0], ;"11",
"Item Class: Abyss Jewels",[0], ;"11",
"Item Class: Active Skill Gems",[0], ;"11",
"Item Class: Support Skill Gems",[0], ;"11",
"Item Class: Breachstones",[0], ;"11",
"Item Class: Incubators",[0], ;"11",
"Item Class: Trinkets",[0], ;"11",
"Item Class: Mana Flasks",[0,1], ;"12",
"Item Class: Life Flasks",[0,1], ;"12",
"Item Class: Hybrid Flasks",[0,1], ;"12",
"Item Class: Utility Flasks",[0,1], ;"12",
"Item Class: Daggers",[0,1,2], ;"13",
"Item Class: Rune Daggers",[0,1,2], ;"13",
"Item Class: Wands",[0,1,2], ;"13",
"Item Class: Thrusting One Hand Swords",[0,1,2,3], ;"14",
"Item Class: Fishing Rods",[0,1,2,3], ;"14",
"Item Class: Belts",[0,10], ;"21",
"Item Class: Gloves",[0,1,10,11], ;"22",
"Item Class: Claws",[0,1,10,11], ;"22",
"Item Class: Helmets",[0,1,10,11], ;"22",
"Item Class: Boots",[0,1,10,11], ;"22",
"Item Class: One Hand Axes",[0,1,2,10,11,12], ;"23",
"Item Class: Body Armours",[0,1,2,10,11,12], ;"23",
"Item Class: Quivers",[0,1,2,10,11,12], ;"23",
"Item Class: Two Hand Maces",[0,1,2,3,10,11,12,13], ;"24",
"Item Class: Two Hand Axes",[0,1,2,3,10,11,12,13], ;"24",
"Item Class: Warstaves",[0,1,2,3,10,11,12,13], ;"24"
"Item Class: Sceptres",-1, ;[0,1,2], ;"13", variable
"Item Class: One Hand Maces",-1, ;[0,1,2], ;"13", variable
"Item Class: One Hand Swords",-1, ;[0,1,2], ;"13", variable
"Item Class: Two Hand Swords",-1, ;[0,1,2,3], ;"14", variable
"Item Class: Staves",-1, ;[0,1,2,3], ;"14", variable
"Item Class: Shields",-1, ;[0,1,10,11], ;"22", variable
"Item Class: Bows",-1, ;[0,1,2,10,11,12] ;"23", variable
)


scept := Map(
 "basezz1",[0,1,2,10,11,12],
 "Driftwood Sceptre",[0,1,2]
)

mace := Map(
 "basezz1",[0,1,2,10,11,12],
 "Club",[0,1,2],
 "Tenderizer",[0,1,2]
)

ohs := Map(
 "basezz1",[0,1,2,10,11,12],
 "Rusted Sword",[0,1,2],
 "Copper Sword",[0,1,2],
 "Sabre",[0,1,2],
 "Variscite Blade",[0,1,2],
 "Cutlass",[0,1,2],
 "Gemstone Sword",[0,1,2],
 "Corsair Sword",[0,1,2]
)

ths := Map(
 "basezz1",[0,1,2,3,10,11,12,13],
 "Corroded Blade",[0,1,2,3]
)

staff := Map(
 "basezz1",[0,1,2,3,10,11,12,13],
 "Gnarled Branch",[0,1,2,3]
)

shield := Map(
 "basezz1",[0,1,10,11],
 "Tower Shield",[0,1,2,3,10,11,12,13],
 "Round Shield",[0,1,2,10,11,12],
 "Kite Shield",[0,1,2,10,11,12],
)

bow := Map(
 "basezz1",[0,1,2,3,10,11,12,13],
 "Crude Bow",[0,1,2,10,11,12],
 "Short Bow",[0,1,2,10,11,12],
 "Grove Bow",[0,1,2,10,11,12],
 "Thicket Bow",[0,1,2,10,11,12]
)

variableMap := Map(
"Item Class: Sceptres", &scept,
"Item Class: One Hand Maces", &mace,
"Item Class: One Hand Swords", &ohs,
"Item Class: Two Hand Swords", &ths,
"Item Class: Staves", &staff,
"Item Class: Shields", &shield,
"Item Class: Bows", &bow
)

;compute these from characterWidth := 9 and separatorWidth := 4

; pixel offsets from tribute symbol to digits. This is done because of the separator
digitOffset := [0,9,18,31,40]

; offsets for tribute costs
tottribOffset := [517, 505, 493, 481, 464]
totDigitMap := Map(464,4,481,3,493,2,505,1)
tottrib5Offset := [526, 515, 504, 493, 477, 466]
tot5DigitMap := Map(466,5,477,4,493,3,504,2,515,1)

; map from pixel offsets to digit offsets
digitMap := Map(
28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,-1,
37,2,38,2,39,2,40,2,41,2,42,2,43,2,44,2,45,-1,
46,3,47,3,48,3,49,3,50,3,51,3,52,3,54,3,54,-1,55,-1,56,-1,57,-1,58,-1,
59,4,60,4,61,4,62,4,63,4,64,4,65,4,66,4,67,-1,
68,5,69,5,70,5,71,5,72,5,73,5,74,5,75,5,76,-1
)

F3::{
  if WinActive("Path of Exile"){

    BlockInput true
    backupClipboard := ClipboardAll()
    newClip := "-1"
    GDIp.Startup()
    TimeStamp := FormatTime(, 'yyyy_MM_dd_HH_mm_ss')
    LogName := LogSubDir 'text' TimeStamp '.txt'

; check if there's tribute with 5 digits
      fiveTribute := PixelSearch(&XXX,&YYY, 517, 218, 520, 238, 0xaa9e81, 20)

; find the tribute for five digits
      if fiveTribute{
        tributeAvailable := "dg5dg4dg3dg2dg1"
        usedDigits := []
        emptyDigitLocations := "54321"
        for digitValue in [0,1,2,3,4,5,6,7,8,9]{
          if ImageSearch(&XXX, &YYY, totalTLx, totalTLy, totalBRx, totalBRy, "*30 " IconSubDir "tribtots5" digitValue ".png"){
            usedDigits.Push(digitValue)
            emptyDigitLocations := StrReplace(emptyDigitLocations, tot5DigitMap[XXX])
            tributeAvailable := StrReplace(tributeAvailable, "dg" tot5DigitMap[XXX], digitValue)
          }
        }
; for any left over digits you haven't found, try and find the digits that exist in that number.
        for index in StrSplit(emptyDigitLocations){
          for digitValue in usedDigits{
            if ImageSearch(&XXX, &YYY, tottrib5Offset[index+1], totalTLy, tottrib5Offset[index], totalBRy, "*30 " IconSubDir "tribtots5" digitValue ".png"){
              tributeAvailable := StrReplace(tributeAvailable, "dg" index, digitValue)
              break
            }
          }
        }
        if (tributeAvailable = "d5dg4dg3dg2dg1"){
          tributeAvailable := "should be 5, but failed to find"
        }
        FileAppend 'Tribute Available ' tributeAvailable '`r`n`r`n', LogName
      }
; find the tribute currently available, believing there's 4 digits
      else{
        tributeAvailable := "dg4dg3dg2dg1"
        usedDigits := []
        emptyDigitLocations := "4321"
        for digitValue in [0,1,2,3,4,5,6,7,8,9]{
          if ImageSearch(&XXX, &YYY, totalTLx, totalTLy, totalBRx, totalBRy, "*30 " IconSubDir "tribtot" digitValue ".png"){
            usedDigits.Push(digitValue)
            emptyDigitLocations := StrReplace(emptyDigitLocations, totDigitMap[XXX])
            tributeAvailable := StrReplace(tributeAvailable, "dg" totDigitMap[XXX], digitValue)
          }
        }
; for any left over digits you haven't found, try and find the digits that exist in that number.
        for index in StrSplit(emptyDigitLocations){
          for digitValue in usedDigits{
            if ImageSearch(&XXX, &YYY, tottribOffset[index+1], totalTLy, tottribOffset[index], totalBRy, "*30 " IconSubDir "tribtot" digitValue ".png"){
              tributeAvailable := StrReplace(tributeAvailable, "dg" index, digitValue)
              break
            }
          }
        }
        if (tributeAvailable = "dg4dg3dg2dg1"){
          tributeAvailable := "unknown, or 1-3 digit value"
        }
        FileAppend 'Tribute Available ' tributeAvailable '`r`n`r`n', LogName
      }




  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
; !note! this array is transposed from the in-game window!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    coords := ["000","001","002","003","004","005","006","007","008","009",
               "010","011","012","013","014","015","016","017","018","019",
               "020","021","022","023","024","025","026","027","028","029",
               "030","031","032","033","034","035","036","037","038","039",
               "040","041","042","043","044","045","046","047","048","049",
               "050","051","052","053","054","055","056","057","058","059",
               "060","061","062","063","064","065","066","067","068","069",
               "070","071","072","073","074","075","076","077","078","079",
               "080","081","082","083","084","085","086","087","088","089",
               "090","091","092","093","094","095","096","097","098","099",
               "100","101","102","103","104","105","106","107","108","109",
               "110","111","112","113","114","115","116","117","118","119"]

    isDeferring := 1

    Loop coords.Length{
; if on a known full slot, skip loop
      if (coords[A_index] = -1){
        continue
      }


; move mouse to the right location, wait for the game to catch up, and copy item info
      thisX := SubStr(coords[A_index],1,2)
      thisY := SubStr(coords[A_index],3,1)
      MouseMove xTLCorner+thisX*xStep, yTLCorner+thisY*yStep
      A_Clipboard := "-1"
      Sleep 190 ; depends on latency 
      Send "^c"
      ClipWait(0.1)
      Sleep 70
      newClip := A_Clipboard

; dev timer
      startTime := A_TickCount

; if empty slot, check done, otherwise go next. 
      splitString := StrSplit(newClip,'`r`n')
      if (newClip = "-1"){
        if (thisY<=6 and coords[A_index+1] != -1 and coords[A_index+2] != -1 and coords[A_index+3] != -1){
          break
        }
        continue
      }

; use copy info to find what item it is
      if sizeMap.Has(splitString[1]){
        skipping := sizeMap[splitString[1]]
        if (skipping = -1){
          thisMap := %variableMap[splitString[1]]%
          skipping := thisMap["basezz1"]
          For key, value in thisMap{
            if (InStr(newClip,key)>0){
              skipping := value
            }
          }
        }
; check if the item is deferred
        if isDeferring {
          pos2 := A_index + skipping[-1]
          skipX := SubStr(coords[pos2],1,2)
          skipY := SubStr(coords[pos2],3,1)
          bounds := [xTLCorner+skipX*xStep,yTLCorner+skipY*yStep,xTLCorner+skipX*xStep+xStep,yTLCorner+skipY*yStep+yStep]
          ; GrabScreen(ImgSubDir 'snapshot' A_index '-1-' TimeStamp '.PNG',{ X: bounds[1], Y: bounds[2], W: xStep, H: yStep, X2: bounds[3], Y2: bounds[4]})

          if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferafford1.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferafford2.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferafford3.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferafford4.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferunafford1.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferunafford2.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferunafford3.png")){
          }
          else if (ImageSearch(&XDD, &YDD, bounds[1],bounds[2],bounds[3],bounds[4], "*10 " IconSubDir "deferunafford4.png")){
          }
          else{
            XDD := -1
            YDD := -1
          }
        }

; block out the spaces on the reward board that are full with this item
        pos := A_index
        ; for x in skipping, set
        For offset in skipping{
          coords[pos+offset] := -1
        }

; if the item was deferred, don't log it.

        if isDeferring {
          if (XDD != -1){
            continue
          }
          else{
            isDeferring :=0
          }
        }
      }

; dev timer
      deferTime := A_TickCount

; set bounds for where the tribute symbol could be, based on the item type
      if (splitString[1] = "Item Class: Support Skill Gems"){
        bounds := [Ceil((xTLCorner+thisX*xStep-100)/2),yTLCorner+thisY*yStep-120,xTLCorner+thisX*xStep+800,A_ScreenHeight]
      }
      else{
        bounds := [Ceil((xTLCorner+thisX*xStep-100)/2),yTLCorner+thisY*yStep-120,xTLCorner+thisX*xStep+600,A_ScreenHeight]
      }
; find the tribute symbol
      if (ImageSearch(&FoundX, &FoundY, bounds[1],bounds[2],bounds[3],bounds[4], "*TransWhite " IconSubDir "tribute1.png")){
      }
      else if (ImageSearch(&FoundX, &FoundY, bounds[1],bounds[2],bounds[3],bounds[4], "*TransWhite " IconSubDir "tribute2.png")){
      }
      else if (ImageSearch(&FoundX, &FoundY, bounds[1],bounds[2],bounds[3],bounds[4], "*TransWhite " IconSubDir "tribute3.png")){
      }
      else if (ImageSearch(&FoundX, &FoundY, bounds[1],bounds[2],bounds[3],bounds[4], "*TransWhite " IconSubDir "tribute4.png")){
      }
      else{
        FoundX := -1
        FoundY := -1
      }


; dev timer
      tributeTime := A_TickCount

      FileName := ImgSubDir 'snapshot'  TimeStamp '-' A_index '.PNG'
      if (FoundX != -1){       
; when we know more about costs, manipulating the digit order can save time in deciding the item isn't affordable
; find the cost
        itemCost := "dg5dg4dg3dg2dg1"
        usedDigits := []
        emptyDigitLocations := "54321"
        affordable := 0
        for digitValue in [0,1,2,3,4,5,6,7,8,9]{
          if ImageSearch(&XXX, &YYY, FoundX-24-9-2-40, FoundY-4, FoundX-24+2, FoundY+16, "*TransWhite " IconSubDir "afford" digitValue ".png"){
            affordable := 1
            usedDigits.Push(digitValue)
            emptyDigitLocations := StrReplace(emptyDigitLocations, digitMap[FoundX-XXX])
            itemCost := StrReplace(itemCost, "dg" digitMap[FoundX-XXX], digitValue)
          }
        }
        if affordable {
; trim the cost on the left, then find any missing digits
          if InStr(emptyDigitLocations, "5"){
            emptyDigitLocations := StrReplace(emptyDigitLocations, "5")
            if InStr(emptyDigitLocations, "4"){
              emptyDigitLocations := StrReplace(emptyDigitLocations, "4")
            }
          }
          for index in StrSplit(emptyDigitLocations){
            for digitValue in usedDigits{
              if ImageSearch(&XXX, &YYY, FoundX-24-9-2-digitOffset[index], FoundY-4, FoundX-24+2-digitOffset[index], FoundY+16, "*TransWhite " IconSubDir "afford" digitValue ".png"){
                itemCost := StrReplace(itemCost, "dg" index, digitValue)
                break
              }
            }
          }
        }
; alternatively, find the cost for unaffordable items
        if not affordable {
          for digitValue in [0,1,2,3,4,5,6,7,8,9]{
            if ImageSearch(&XXX, &YYY, FoundX-24-9-2-40, FoundY-4, FoundX-24+2, FoundY+16, "*TransWhite " IconSubDir "unafford" digitValue ".png"){
              usedDigits.Push(digitValue)
              emptyDigitLocations := StrReplace(emptyDigitLocations, digitMap[FoundX-XXX])
              itemCost := StrReplace(itemCost, "dg" digitMap[FoundX-XXX], digitValue)
            }
          }
          if InStr(emptyDigitLocations, "5"){
            emptyDigitLocations := StrReplace(emptyDigitLocations, "5")
            if InStr(emptyDigitLocations, "4"){
              emptyDigitLocations := StrReplace(emptyDigitLocations, "4")
            }
          }
          for index in StrSplit(emptyDigitLocations){
            for digitValue in usedDigits{
              if ImageSearch(&XXX, &YYY, FoundX-24-9-2-digitOffset[index], FoundY-4, FoundX-24+2-digitOffset[index], FoundY+16, "*TransWhite " IconSubDir "unafford" digitValue ".png"){
                itemCost := StrReplace(itemCost, "dg" index, digitValue)
                break
              }
            }
          }
        }
; remove the digits that aren't found.
        itemCost := StrReplace(itemCost, "dg1")
        itemCost := StrReplace(itemCost, "dg2")
        itemCost := StrReplace(itemCost, "dg3")
        itemCost := StrReplace(itemCost, "dg4")
        itemCost := StrReplace(itemCost, "dg5")

        if CostLoggingDebug {
          GrabScreen(ImgSubDir 'cost' TimeStamp '-' A_index '.PNG', { X: FoundX-24-9-2-40, Y: FoundY-4, W:55, H:20, X2: FoundX-24+2, Y2: FoundY+16} )
        }
      }

; dev timer
      costTime := A_TickCount

; if you didn't find the tribute symbol, save the image and clear cost
      if (FoundX = -1){
        GrabScreen(FileName,{ X: 0, Y: yTLCorner+thisY*yStep-2*yStep, W: A_ScreenWidth, H: A_ScreenHeight-yTLCorner-thisY*yStep+2*yStep, X2: A_ScreenWidth, Y2: A_ScreenHeight})
        itemCost := "Not found"
      }
      FileAppend "Pos: " A_index '`r`n', LogName
      FileAppend "Cost: " itemCost '`r`n', LogName
      if TimingDebug {
        FileAppend "Total time: " costTime-startTime "`r`nDefer: " deferTime-startTime "`r`n", LogName
        FileAppend "Tribute find: " tributeTime-deferTime "`r`nCost compute: " costTime-tributeTime '`r`n', LogName
      }
      FileAppend newClip, LogName
      FileAppend '`r`n', LogName

    }


    GDIp.Shutdown()
    A_Clipboard := backupClipboard
    BlockInput false
  }
}

; Small collection of functions for writing files out of this AHK script

Hex2Bin(inString) ; adapted from a partially helpful ChatGPT sugguestion: "Use Format("{:u}", string)"
{
  splitString := StrSplit(inString, ' ')
  output := ""
  if (2*Ceil(splitString.Length/2) != splitString.Length)
  {
    splitString.push("00")
  }

  Loop splitString.Length/2 {
    decValue1 := Format("{:u}", "0x" splitString[2*A_index])
    decValue2 := Format("{:u}", "0x" splitString[2*A_index-1])
    output .= Chr(decValue1*256+decValue2)
  }

  return output
}


; file open and write code taken from https://www.autohotkey.com/board/topic/6946-binary-file-reading-and-writing/

OpenFileForWrite(_filename)
{
	handle := DllCall("CreateFile"
			, "Str", _filename		; lpFileName
			, "UInt", 0x40000000	; dwDesiredAccess (GENERIC_WRITE)
			, "UInt", 3		; dwShareMode (FILE_SHARE_READ|FILE_SHARE_WRITE)
			, "UInt", 0		; lpSecurityAttributes
			, "UInt", 4		; dwCreationDisposition (OPEN_ALWAYS: create if not exists)
			, "UInt", 0		; dwFlagsAndAttributes
			, "UInt", 0)	; hTemplateFile

	return handle
}


CloseFile(_handle)
{
	result := DllCall("CloseHandle"
			, "UInt", _handle)
}

WriteInFile(_handle, data)
{
	written := 0

	dataSize := StrLen(data)*2        ; Get the capacity (>= used length!)

	result := DllCall("WriteFile"
			, "UInt", _handle	; hFile
			, "Str", &data		; lpBuffer
			, "UInt", dataSize	; nNumberOfBytesToWrite
			, "UInt *", written	; lpNumberOfBytesWritten
			, "UInt", 0)		; lpOverlapped

	Return written
}






; Area format:
; { X: topleft, Y: topleft, W: width, H: height, X2: botright, Y2: botright}

; GrabScreen adapted from Snipper

;{ GrabScreen
GrabScreen(save,Area)
{
;	GDIp.Startup()
	pBitmap := GDIp.BitmapFromScreen(Area) ;
	TimeStamp := FormatTime(, 'yyyy_MM_dd_HH_mm_ss')
	FileName := 'snapshot' TimeStamp '.PNG'
	GDIp.SaveBitmapToFile(pBitmap, save)
	GDIp.DisposeImage(pBitmap)
;	GDIp.Shutdown()
	Return false
}
;}






;; LIBRARY -- by FanaticGuru
;; https://www.autohotkey.com/boards/viewtopic.php?f=83&t=115622
;{-----------------------------------------------
;
;{ GDIp Class - Select GDIp library functions converted to a class specifically for this script
#DllLoad 'GdiPlus'
Class GDIp
{
	;{ Startup
	Static Startup()
	{
		If (this.HasProp("Token"))
			Return
		input := Buffer((A_PtrSize = 8) ? 24 : 16, 0)
		NumPut("UInt", 1, input)
		DllCall("gdiplus\GdiplusStartup", "UPtr*", &pToken := 0, "UPtr", input.ptr, "UPtr", 0)
		this.Token := pToken
	}
	;}
	;{ Shutdown
	Static Shutdown()
	{
		If (this.HasProp("Token"))
			DllCall("Gdiplus\GdiplusShutdown", "UPtr", this.DeleteProp("Token"))
	}
	;}
	;{ BitmapFromScreen
	Static BitmapFromScreen(Area)
	{
		chdc := this.CreateCompatibleDC()
		hbm := this.CreateDIBSection(Area.W, Area.H, chdc)
		obm := this.SelectObject(chdc, hbm)
		hhdc := this.GetDC()
		this.BitBlt(chdc, 0, 0, Area.W, Area.H, hhdc, Area.X, Area.Y)
		this.ReleaseDC(hhdc)
		pBitmap := this.CreateBitmapFromHBITMAP(hbm)
		this.SelectObject(chdc, obm), this.DeleteObject(hbm), this.DeleteDC(hhdc), this.DeleteDC(chdc)
		Return pBitmap
	}
	;}
	;{ CreateCompatibleDC
	Static CreateCompatibleDC(hdc := 0)
	{
		Return DllCall("CreateCompatibleDC", "UPtr", hdc)
	}
	;}
	;{ CreateDIBSection
	Static CreateDIBSection(w, h, hdc := "", bpp := 32, &ppvBits := 0, Usage := 0, hSection := 0, Offset := 0)
	{
		hdc2 := hdc ? hdc : this.GetDC()
		bi := Buffer(40, 0)
		NumPut("UInt", 40, bi, 0)
		NumPut("UInt", w, bi, 4)
		NumPut("UInt", h, bi, 8)
		NumPut("UShort", 1, bi, 12)
		NumPut("UShort", bpp, bi, 14)
		NumPut("UInt", 0, bi, 16)

		hbm := DllCall("CreateDIBSection"
			, "UPtr", hdc2
			, "UPtr", bi.ptr    ; BITMAPINFO
			, "uint", Usage
			, "UPtr*", &ppvBits
			, "UPtr", hSection
			, "uint", Offset, "UPtr")

		If !hdc
			this.ReleaseDC(hdc2)
		Return hbm
	}
	;}
	;{ SelectObject
	Static SelectObject(hdc, hgdiobj)
	{
		Return DllCall("SelectObject", "UPtr", hdc, "UPtr", hgdiobj)
	}
	;}
	;{ BitBlt
	Static BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, raster := "")
	{
		Return DllCall("gdi32\BitBlt"
			, "UPtr", ddc
			, "int", dx, "int", dy
			, "int", dw, "int", dh
			, "UPtr", sdc
			, "int", sx, "int", sy
			, "uint", raster ? raster : 0x00CC0020)
	}
	;}
	;{ CreateBitmapFromHBITMAP
	Static CreateBitmapFromHBITMAP(hBitmap, hPalette := 0)
	{
		DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", "UPtr", hBitmap, "UPtr", hPalette, "UPtr*", &pBitmap := 0)
		Return pBitmap
	}
	;}
	;{ CreateHBITMAPFromBitmap
	Static CreateHBITMAPFromBitmap(pBitmap, Background := 0xffffffff)
	{
		DllCall("gdiplus\GdipCreateHBITMAPFromBitmap", "UPtr", pBitmap, "UPtr*", &hBitmap := 0, "int", Background)
		Return hBitmap
	}
	;}
	;{ DeleteObject
	Static DeleteObject(hObject)
	{
		Return DllCall("DeleteObject", "UPtr", hObject)
	}
	;}
	;{ ReleaseDC
	Static ReleaseDC(hdc, hwnd := 0)
	{
		Return DllCall("ReleaseDC", "UPtr", hwnd, "UPtr", hdc)
	}
	;}
	;{ DeleteDC
	Static DeleteDC(hdc)
	{
		Return DllCall("DeleteDC", "UPtr", hdc)
	}
	;}
	;{ DisposeImage
	Static DisposeImage(pBitmap, noErr := 0)
	{
		If (StrLen(pBitmap) <= 2 && noErr = 1)
			Return 0

		r := DllCall("gdiplus\GdipDisposeImage", "UPtr", pBitmap)
		If (r = 2 || r = 1) && (noErr = 1)
			r := 0
		Return r
	}
	;}
	;{ GetDC
	Static GetDC(hwnd := 0)
	{
		Return DllCall("GetDC", "UPtr", hwnd)
	}
	;}
	;{ SaveBitmapToFile
	Static SaveBitmapToFile(pBitmap, sOutput)
	{
		_p := 0

		Extension := ".PNG"
		DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", &nCount := 0, "uint*", &nSize := 0)
		ci := Buffer(nSize)
		DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, "UPtr", ci.ptr)
		If !(nCount && nSize)
			Return -2

		Static IsUnicode := StrLen(Chr(0xFFFF))
		If (IsUnicode)
		{
			StrGet_Name := "StrGet"
			Loop nCount
			{
				sString := %StrGet_Name%(NumGet(ci, (idx := (48 + 7 * A_PtrSize) * (A_Index - 1)) + 32 + 3 * A_PtrSize, "UPtr"), "UTF-16")
				If !InStr(sString, "*" Extension)
					Continue

				pCodec := ci.ptr + idx
				Break
			}
		} Else
		{
			Loop nCount
			{
				Location := NumGet(ci, 76 * (A_Index - 1) + 44, "UPtr")
				nSize := DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "uint", 0, "int", 0, "uint", 0, "uint", 0)
				sString := Buffer(nSize)
				DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "str", sString, "int", nSize, "uint", 0, "uint", 0)
				If !InStr(sString, "*" Extension)
					Continue

				pCodec := ci.ptr + 76 * (A_Index - 1)
				Break
			}
		}

		If !pCodec
			Return -3


		_E := DllCall("gdiplus\GdipSaveImageToFile", "UPtr", pBitmap, "WStr", sOutput, "UPtr", pCodec, "uint", _p)
		Return _E ? -5 : 0
	}
	;}
}
;}
;}

